{
	"info": {
		"_postman_id": "0d31e687-f02b-4129-8512-a88df3bb3e02",
		"name": "Added  requests Validation Registration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4056721",
		"_collection_link": "https://restless-escape-426718.postman.co/workspace/Testing1~bf327e84-f67e-4f64-b154-e634ad9e8c65/collection/4056721-0d31e687-f02b-4129-8512-a88df3bb3e02?action=share&source=collection_link&creator=4056721"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Correct request Headers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if Content-Type header is correct\r",
									"pm.test(\"Check Content-Type header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Log all response headers to the console\r",
									"console.log(\"Response Headers:\");\r",
									"pm.response.headers.each(header => {\r",
									"    console.log(`${header.key}: ${header.value}`);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"lastName\": \"Dou\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Correct response code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"âœ… Status:\", pm.response.code);\r",
									"});\r",
									"pm.test(\"Check Content-Type Header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"lastName\": \"Dou\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "SQL Injection",
					"item": [
						{
							"name": "Request with SQL Injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reject SQL injection payload\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 422]);\r",
											"    const responseText = pm.response.text().toLowerCase();\r",
											"    pm.expect(responseText).to.not.include(\"syntax error\");\r",
											"    pm.expect(responseText).to.not.include(\"sql\");\r",
											"    pm.expect(responseText).to.not.include(\"exception\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
											"console.log(randomEmail);\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"' OR '1'='1\",\r\n  \"lastName\": \"Hacker\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/auth/signup",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Missing request Headers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 4XX for invalid headers\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 415]);\r",
									"});\r",
									"\r",
									"if (!pm.request.headers.has(\"Content-Type\")) {\r",
									"    console.log(\"Missing header: Content-Type\");\r",
									"}\r",
									"if (!pm.request.headers.has(\"Authorization\")) {\r",
									"    console.log(\"Missing header: Authorization\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"lastName\": \"Dou\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong request Header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Negative test: Response is NOT JSON (Content-Type is text/html)\", function () {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"John\",\r\n    \"lastName\": \"Dou\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with incorrect method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for incorrect HTTP method\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"    console.log(\"Response status code:\", pm.response.code);\r",
									"    console.log(\"Response body:\", pm.response.text());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"John\",\r\n    \"lastName\": \"Dou\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"repeatPassword\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with special charicters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 4XX for special characters\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"    console.log(\"Status code:\", pm.response.code);\r",
									"    console.log(\"Response body:\", pm.response.text());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"!@#$%^&*()_+\",\r\n  \"lastName\": \"~`<>?:\\\"{}|\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Very Long Strings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for too long strings\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 413]); // 413 Payload Too Large or 400 Bad Request\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"AAAAAA...AAA\",\r\n  \"lastName\": \"BBBBBB...BBB\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Invalid Numeric Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for invalid numeric value\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"lastName\": \"Dou\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\",\r\n  \"age\": \"invalidNumber\"\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Wrong Data Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Should return error for wrong data types\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": 12345,\r\n  \"lastName\": true,\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Empty Data / Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for empty object\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"});\r",
									"pm.test(\"If data present, it should be an object\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    if ('data' in jsonData) {\r",
									"        pm.expect(jsonData.data).to.be.an('object');\r",
									"    } else {\r",
									"        console.log(\"No data property in response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for missing required fields\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"    const responseText = pm.response.text().toLowerCase();\r",
									"    pm.expect(responseText).to.include(\"email\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"lastName\": \"Dou\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Null Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for null values\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": null,\r\n  \"lastName\": null,\r\n  \"email\": null,\r\n  \"password\": null,\r\n  \"repeatPassword\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request body with Extra Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return error for additional unexpected fields\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"    pm.expect(pm.response.text()).to.include(\"extraField\").or.include(\"unexpected\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
									"console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"lastName\": \"Dou\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"repeatPassword\": \"{{password}}\",\r\n  \"extraField\": \"extraValue\",\r\n  \"anotherOne\": 123\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomEmail",
			"value": ""
		},
		{
			"key": "url",
			"value": "https://qauto.forstudy.space/api",
			"type": "string",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		}
	]
}