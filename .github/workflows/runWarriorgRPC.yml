name: Run Warrior gRPC

on:
  workflow_dispatch:

jobs:
  run-grpc:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install grpcurl
      - name: Install grpcurl
        run: |
          sudo apt update
          sudo apt install -y curl wget tar
          GRPCURL_VERSION="1.9.3"
          URL="https://github.com/fullstorydev/grpcurl/releases/download/v${GRPCURL_VERSION}/grpcurl_${GRPCURL_VERSION}_linux_x86_64.tar.gz"
          echo "Downloading grpcurl version ${GRPCURL_VERSION}..."
          wget -O grpcurl.tar.gz "$URL"
          tar -xvzf grpcurl.tar.gz
          sudo mv grpcurl /usr/local/bin/
          sudo chmod +x /usr/local/bin/grpcurl
          grpcurl --version

      # Step 3: Create warrior.proto if not exists
      - name: Create warrior.proto
        run: |
          if [ ! -f warrior.proto ]; then
            cat <<EOT > warrior.proto
syntax = "proto3";
package warrior;
import "google/protobuf/empty.proto";

message WarriorDescription {
    string name = 1;
    string damageRange = 2;
    int32 armor = 3;
    int32 health = 4;
    string description = 5;
}

service WarriorServer {
    rpc getBarbarian(google.protobuf.Empty) returns (WarriorDescription);
    rpc getAssassin(google.protobuf.Empty) returns (WarriorDescription);
    rpc getEnchantress(google.protobuf.Empty) returns (WarriorDescription);
    rpc getWerewolf(google.protobuf.Empty) returns (WarriorDescription);
}
EOT
          fi

      # Step 4: Call Warrior gRPC methods
      - name: Call all Warrior methods
        run: |
          mkdir -p warrior_responses
          for method in getBarbarian getAssassin getEnchantress getWerewolf
          do
            echo "Calling $method..."
            grpcurl -plaintext -proto warrior.proto -d '{}' grpc-hillel-warriors.hillel.it:50051 warrior.WarriorServer/$method > warrior_responses/$method.json || echo "$method failed"
          done

      # Step 5: List responses for debugging
      - name: List warrior_responses
        run: ls -la warrior_responses && cat warrior_responses/*.json

      # Step 6: Install Node.js for report generation
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Step 7: Generate formatted HTML report from JSON
      - name: Generate HTML report
        run: |
          mkdir -p testResult
          npm install -g json2html
          cat <<'EOF' > generateReport.js
const fs = require('fs');
const path = require('path');

const files = fs.readdirSync('warrior_responses');
let html = `
<html>
<head>
<title>Warrior Report</title>
<style>
  body { font-family: Arial, sans-serif; }
  pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
  h2 { color: #2a7ae2; }
</style>
</head>
<body>
<h1>Warrior gRPC Report</h1>
`;

files.forEach(file => {
  try {
    const data = JSON.parse(fs.readFileSync(path.join('warrior_responses', file)));
    html += `<h2>${file.replace('.json','')}</h2>`;
    html += `<pre>${JSON.stringify(data, null, 2)}</pre>`;
  } catch(e) {
    html += `<h2>${file.replace('.json','')}</h2><pre>Failed to parse JSON</pre>`;
  }
});

html += '</body></html>';
fs.writeFileSync('testResult/WarriorReport.html', html);
EOF

          node generateReport.js

      # Step 8: List files in testResult (debug)
      - name: List files in testResult
        run: ls -la testResult

      # Step 9: Upload report as artifact
      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: Warrior gRPC Report
          path: testResult/WarriorReport.html
